<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>aks on Satya Tanwar - On Tech And Life</title><link>https://blog.satyatanwar.com/categories/aks/</link><description>Recent content in aks on Satya Tanwar - On Tech And Life</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 09 Dec 2021 06:15:36 -0400</lastBuildDate><atom:link href="https://blog.satyatanwar.com/categories/aks/index.xml" rel="self" type="application/rss+xml"/><item><title>Resilient and efficient microservices topology</title><link>https://blog.satyatanwar.com/posts/technology/3-resilient-and-efficient-microservices-topology/</link><pubDate>Thu, 09 Dec 2021 06:15:36 -0400</pubDate><guid>https://blog.satyatanwar.com/posts/technology/3-resilient-and-efficient-microservices-topology/</guid><description>&lt;p>As part of a recent prototype activity, one of the requirements was to deploy the Microservices in an efficient and resilient manner on a Kubernetes cluster that has nodes spread across multiple zones. First, we will review various scaling scenarios required, and later in the post I will share details on how to use &lt;em>&lt;strong>Well-Known Labels&lt;/strong>&lt;/em>, &lt;em>&lt;strong>pod topology spread constraints&lt;/strong>&lt;/em> and &lt;em>&lt;strong>pod affinity&lt;/strong>&lt;/em> Kubernetes concepts to achieve our goal.&lt;/p></description></item></channel></rss>